This dataset contains all output generated by our tool, including projects with different parameters for containerization.
To keep an overview, I have separated the results in groups:

############################# GROUP 1 #############################
6 ecological scripts with 3 different base images (18 records) without any features

############################# GROUP 2 #############################
6 ecological scripts with 3 different base images (18 records) with 'ms-base-image' set to true

############################# GROUP 3 #############################
'applied-pred-12.2' and 'applied-pred-12.1-chem' contain hidden dependencies, here we check what the influence is of enabling 
the "HiddenDependencies" component

############################# GROUP 4 #############################
check the consistency of the containerization tool of 5 projects, two algorithms (with and without "HiddenDependencies"), each 6 times.
This results in a total of 5*2*6=60 records

############################# GROUP 5 #############################
check the difference in containerization (project us-500) when creating the base image "jupyr-base" with 3 development dependencies.

############################# GROUP 6 #############################
check the difference in containerization (project community-indeces) when optimising the base image.

############################# GROUP 7 #############################
12 projects that can be containerized using rocker/r-apt:bionic that meet the container size and containerization time constraints

############################# GROUP 8 #############################
6 projects than are more advanced meaning they cannot be containerized using rocker/r-apt:bionic.
using rocker/r-apt or jupytr/r-notebook solves it.

############################# GROUP 9 #############################
these projects cannot be containerized (although some can but not with the set parameters).

############################# GROUP 10 #############################
unknown why these 4 records are here
